/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.mobileapptracker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.mobileapptracker.MATEventItem;
import com.mobileapptracker.MobileAppTracker;

@Kroll.module(name="Mobileapptracker", id="ti.mobileapptracker")
public class MobileapptrackerModule extends KrollModule {
    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;
    
    private static MobileAppTracker mat = null;
    
    public MobileapptrackerModule() {
        super();
    }
    
    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        // put module init code that needs to run when the application is created
    }
    
    @Kroll.method
    public void initTracker(String advId, String convKey) {
        mat = new MobileAppTracker(getActivity(), advId, convKey);
    }
    
    @Kroll.method
    public void trackInstall() {
        mat.trackInstall();
    }
    
    @Kroll.method
    public void trackUpdate() {
        mat.trackUpdate();
    }
    
    @Kroll.method
    public void trackInstallWithReferenceId(String refId) {
        mat.setRefId(refId);
        mat.trackInstall();
    }
    
    @Kroll.method
    public void trackUpdateWithReferenceId(String refId) {
        mat.setRefId(refId);
        mat.trackUpdate();
    }
    
    @Kroll.method
    public void trackAction(String eventIdOrName, boolean isId, String refId, double revenue, String currency) {
        mat.trackAction(eventIdOrName, revenue, currency, refId);
    }
    
    @Kroll.method
    public void trackActionWithItems(String eventIdOrName, boolean isId, Object[] items, String refId, double revenueAmount, String currencyCode) {
        trackActionWithReceipt(eventIdOrName, isId, items, refId, revenueAmount, currencyCode, 0, null, null);
    }
    
    @Kroll.method
    public void trackActionWithReceipt(String eventIdOrName, boolean isId, Object[] items, String refId, double revenueAmount, String currencyCode, int transactionState, String receipt, String receiptSignature) {	
        List<MATEventItem> listItems = convertToMATEventItems(items);
        
        mat.setCurrencyCode(currencyCode);
        mat.setRefId(refId);
        mat.setRevenue(revenueAmount);
        
        if (receiptSignature != null && receiptSignature.length() > 0) {
            mat.trackAction(eventIdOrName, listItems, receipt, receiptSignature);
        } else {
            mat.trackAction(eventIdOrName, listItems);
        }
    }
    
    @Kroll.method
    public void setAge(int age) {
        mat.setAge(age);
    }
    
    @Kroll.method
    public void setAllowDuplicates(boolean allowDuplicates) {
        mat.setAllowDuplicates(allowDuplicates);
    }
    
    @Kroll.method
    public void setAppAdTracking(boolean enable) {
        mat.setAppAdTracking(enable);
    }
    
    @Kroll.method
    public void setCurrencyCode(String currencyCode) {
        mat.setCurrencyCode(currencyCode);
    }
    
    @Kroll.method
    public void setDebugMode(boolean debugMode) {
        mat.setDebugMode(debugMode);
    }
    
    @Kroll.method
    public void setGender(int gender) {
        mat.setGender(1 == gender ? MobileAppTracker.GENDER_FEMALE : MobileAppTracker.GENDER_MALE);
    }
    
    @Kroll.method
    public void setLocation(double latitude, double longitude) {
        mat.setLatitude(latitude);
        mat.setLongitude(longitude);
    }
    
    @Kroll.method
    public void setLocationWithAltitude(double latitude, double longitude, double altitude) {
        mat.setLatitude(latitude);
        mat.setLongitude(longitude);
        mat.setAltitude(altitude);
    }
    
    @Kroll.method
    public void setMATAdvertiserId(String matAdvertiserId) {
        mat.setAdvertiserId(matAdvertiserId);
    }
    
    @Kroll.method
    public void setMATConversionKey(String matConversionKey) {
        mat.setKey(matConversionKey);
    }
    
    @Kroll.method
    public void setPackageName(String packageName) {
        mat.setPackageName(packageName);
    }
    
    @Kroll.method
    public void setRevenue(double revenue) {
        mat.setRevenue(revenue);
    }
    
    @Kroll.method
    public void setSiteId(String siteId) {
        mat.setSiteId(siteId);
    }
    
    @Kroll.method
    public void setTrusteTPID(String tpid) {
        mat.setTRUSTeId(tpid);
    }
    
    @Kroll.method
    public void setUserId(String userId) {
        mat.setUserId(userId);
    }
    
    @Kroll.method
    public void startAppToAppTracking(String targetAppId, String advertiserId, String offerId, String publisherId, boolean shouldRedirect) {
        mat.setTracking(advertiserId, targetAppId, publisherId, offerId, shouldRedirect);
    }
    
    /////////////////////////////////
    // Android no-op methods
    /////////////////////////////////
    
    @Kroll.method
    public void setOpenUDID(String openUDID) {
        // no-op
    }
    
    @Kroll.method
    public void setUIID(String uiid) {
        // no-op
    }
    
    @Kroll.method
    public void setDelegate(boolean enable) {
        // no-op
    }
    
    @Kroll.method
    public void setJailbroken(boolean isJailbroken) {
        // no-op
    }
    
    @Kroll.method
    public void setShouldAutoDetectJailbroken(boolean shouldAutoDetect) {
        // no-op
    }
    
    @Kroll.method
    public void setMACAddress(String mac) {
        // no-op
    }
    
    @Kroll.method
    public void setODIN1(String odin1) {
        // no-op
    }
    
    @Kroll.method
    public void setUseCookieTracking(boolean useCookieTracking) {
        // no-op
    }
    
    @Kroll.method
    public void setRedirectUrl(String redirectUrl) {
        // no-op
    }
    
    @Kroll.method
    public void setAppleAdvertisingIdentifier(String advertiserId) {
        // no-op
    }
    
    @Kroll.method
    public void setAppleVendorIdentifier(String vendorId) {
        // no-op
    }
    
    @Kroll.method
    public void setShouldAutoGenerateAppleVendorIdentifier(boolean shouldAutoGenerate) {
        // no-op
    }
    
    @Kroll.method
    public void setShouldAutoGenerateAppleAdvertisingIdentifier(boolean shouldAutoGenerate) {
        // no-op
    }
    
    @Kroll.method
    public void printSDKDataParameters() {
        // no-op
    }
    
    private List<MATEventItem> convertToMATEventItems(Object[] arrItemMaps) {
        List<MATEventItem> listItems = new ArrayList<MATEventItem>();

        try {
            JSONArray arr = new JSONArray(Arrays.toString(arrItemMaps));

            for (int i = 0; i < arr.length(); i++) {
                JSONObject item = arr.getJSONObject(i);

                String itemName = item.getString("item");
                int quantity = 0;
                double unitPrice = 0;
                double revenue = 0;
                String attribute1 = null;
                String attribute2 = null;
                String attribute3 = null;
                String attribute4 = null;
                String attribute5 = null;

                if (item.has("quantity")) {
                    quantity = item.getInt("quantity");
                }
                if (item.has("unit_price")) {
                    unitPrice = item.getDouble("unit_price");
                }
                if (item.has("revenue")) {
                    revenue = item.getDouble("revenue");
                }

                if (item.has("attribute_sub1")) {
                    attribute1 = item.getString("attribute_sub1");
                }
                if (item.has("attribute_sub2")) {
                    attribute2 = item.getString("attribute_sub2");
                }
                if (item.has("attribute_sub3")) {
                    attribute3 = item.getString("attribute_sub3");
                }
                if (item.has("attribute_sub4")) {
                    attribute4 = item.getString("attribute_sub4");
                }
                if (item.has("attribute_sub5")) {
                    attribute5 = item.getString("attribute_sub5");
                }

                MATEventItem eventItem = new MATEventItem(itemName, quantity, unitPrice, revenue, attribute1, attribute2, attribute3, attribute4, attribute5);
                listItems.add(eventItem);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return listItems;
    }
}

